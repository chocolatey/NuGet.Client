#nullable enable
NuGet.VisualStudio.Internal.Contracts.INuGetProjectManagerService.GetInstallActionsAsync(System.Collections.Generic.IReadOnlyCollection<string!>! projectIds, NuGet.Packaging.Core.PackageIdentity! packageIdentity, NuGet.PackageManagement.VersionConstraints versionConstraints, bool includePrelease, NuGet.Resolver.DependencyBehavior dependencyBehavior, System.Collections.Generic.IReadOnlyList<string!>! packageSourceNames, NuGet.Versioning.VersionRange! versionRange, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyList<NuGet.VisualStudio.Internal.Contracts.ProjectAction!>!>
NuGet.VisualStudio.Internal.Contracts.INuGetSearchService.GetPackageVersionsAsync(NuGet.Packaging.Core.PackageIdentity! identity, System.Collections.Generic.IReadOnlyCollection<NuGet.VisualStudio.Internal.Contracts.PackageSourceContextInfo!>! packageSources, bool includePrerelease, bool isTransitive, System.Collections.Generic.IEnumerable<NuGet.VisualStudio.Internal.Contracts.IProjectContextInfo!>! projects, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyCollection<NuGet.VisualStudio.Internal.Contracts.VersionInfoContextInfo!>!>
NuGet.VisualStudio.Internal.Contracts.INuGetSearchService.GetPackageVersionsAsync(NuGet.Packaging.Core.PackageIdentity! identity, System.Collections.Generic.IReadOnlyCollection<NuGet.VisualStudio.Internal.Contracts.PackageSourceContextInfo!>! packageSources, bool includePrerelease, bool isTransitive, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyCollection<NuGet.VisualStudio.Internal.Contracts.VersionInfoContextInfo!>!>
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.DownloadCache.get -> System.Collections.Generic.IEnumerable<NuGet.Protocol.Core.Types.DownloadCache!>!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.DownloadCacheDate.get -> System.DateTime?
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.IsApproved.get -> bool
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.IsDownloadCacheAvailable.get -> bool
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.PackageApprovedDate.get -> System.DateTime?
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.PackageCleanupResultDate.get -> System.DateTime?
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.PackageHash.get -> string!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.PackageHashAlgorithm.get -> string!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.PackagePath.get -> string!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.PackageReviewedDate.get -> System.DateTime?
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.PackageReviewer.get -> string!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.PackageSize.get -> long?
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.PackageStatus.get -> string!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.PackageSubmittedStatus.get -> string!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.PackageTestResultStatus.get -> string!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.PackageTestResultStatusDate.get -> System.DateTime?
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.PackageValidationResultDate.get -> System.DateTime?
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.PackageValidationResultStatus.get -> string!
NuGet.VisualStudio.Internal.Contracts.TransitivePackageSearchMetadata.VersionDownloadCount.get -> int?
